{"version":3,"sources":["service-worker.js"],"names":["OFFLINE_VERSION","CACHE_NAME","OFFLINE_URL","GH_API","MESSAGES","commit","event","waitUntil","githubCommit","data","token","owner","repo","branch","files","message","items","prepareFilesForRequest","ref","request","tree","base_tree","object","sha","parents","force","method","path","body","fetch","JSON","stringify","headers","Authorization","then","x","json","Object","entries","map","content","assign","mode","type","self","addEventListener","action"],"mappings":";AAIA,MAAMA,EAAkB,EAClBC,EAAa,UACbC,EAAc,eACdC,EAAS,yBAETC,EAAW,CACfC,OAAQC,GAASA,EAAMC,UAAUC,EAAaF,EAAMG,QAetD,eAAeD,GAAa,MAAEE,EAAF,MAASC,EAAT,KAAgBC,EAAhB,OAAsBC,EAAtB,MAA8BC,EAA9B,QAAqCC,IACzDC,MAAAA,EAAQC,EAAuBH,GAE/BI,QAAYC,EAAQ,yBAA0BN,KAI9CO,QAAaD,EAAQ,OAAS,aAAa,CAC/CC,KAAMJ,EACNK,UAAWH,EAAII,OAAOC,MAKlBlB,QAAec,EAAQ,OAAS,eAAe,CACnDJ,QAAAA,EACAK,KAAMA,EAAKG,IACXC,QAAS,CAACN,EAAII,OAAOC,OAKhBJ,OAAAA,EAAQ,0BAA2BN,IAAU,CAClDU,IAAKlB,EAAOkB,IACZE,OAAO,IAGAN,SAAAA,EAAQO,EAAQC,EAAMC,GACtBC,OAAAA,SAAS1B,WAAgBQ,KAASC,KAAQe,IAAQ,CACvDD,OAAAA,EACAE,KAAME,KAAKC,UAAUH,GACrBI,QAAS,CAAEC,uBAAwBvB,OAClCwB,KAAKC,GAAKA,EAAEC,SAInB,SAASnB,EAAuBH,GACvBuB,OAAAA,OAAOC,QAAQxB,GACnByB,IAAI,EAAEZ,EAAMa,KACI,MAAXA,EAEK,CAAEb,KAAAA,EAAMJ,IAAK,MAGC,iBAAZiB,EACF,CAAEb,KAAAA,EAAMa,QAAAA,GAGV,CAAEb,KAAAA,EAAMa,QAASV,KAAKC,UAAUS,EAAS,KAAM,KAEvDD,IAAIJ,GAAKE,OAAOI,OAAON,EAAG,CAAEO,KAAM,SAAUC,KAAM,UA9DvDC,KAAKC,iBAAiB,UAAWvC,OACjCsC,KAAKC,iBAAiB,WAAYvC,OAClCsC,KAAKC,iBAAiB,QAASvC,OAE/BsC,KAAKC,iBAAiB,UAAWvC,IACzBwC,MAAAA,EAAS1C,EAASE,EAAMG,KAAKkC,MAEb,mBAAXG,GACTA,EAAOxC","file":"service-worker.js","sourceRoot":"../src","sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-undef */\n\nconst OFFLINE_VERSION = 1;\nconst CACHE_NAME = 'offline';\nconst OFFLINE_URL = 'offline.html';\nconst GH_API = 'https://api.github.com';\n\nconst MESSAGES = {\n  commit: event => event.waitUntil(githubCommit(event.data)),\n};\n\nself.addEventListener('install', event => {});\nself.addEventListener('activate', event => {});\nself.addEventListener('fetch', event => {});\n\nself.addEventListener('message', event => {\n  const action = MESSAGES[event.data.type];\n\n  if (typeof action === 'function') {\n    action(event);\n  }\n});\n\nasync function githubCommit({ token, owner, repo, branch, files, message }) {\n  const items = prepareFilesForRequest(files);\n\n  const ref = await request('GET', `/git/refs/heads/${branch}`);\n\n  // Create tree\n  // https://docs.github.com/en/free-pro-team@latest/rest/reference/git#create-a-tree\n  const tree = await request('POST', `/git/trees`, {\n    tree: items,\n    base_tree: ref.object.sha,\n  });\n\n  // Create commit\n  // https://docs.github.com/en/free-pro-team@latest/rest/reference/git#create-a-commit\n  const commit = await request('POST', `/git/commits`, {\n    message,\n    tree: tree.sha,\n    parents: [ref.object.sha],\n  });\n\n  // Update a reference\n  // https://docs.github.com/en/free-pro-team@latest/rest/reference/git#update-a-reference\n  return request('POST', `/git/refs/heads/${branch}`, {\n    sha: commit.sha,\n    force: true,\n  });\n\n  function request(method, path, body) {\n    return fetch(`${GH_API}/repos/${owner}/${repo}/${path}`, {\n      method,\n      body: JSON.stringify(body),\n      headers: { Authorization: `token ${token}` },\n    }).then(x => x.json());\n  }\n}\n\nfunction prepareFilesForRequest(files) {\n  return Object.entries(files)\n    .map(([path, content]) => {\n      if (content == null) {\n        // delete file\n        return { path, sha: null };\n      }\n\n      if (typeof content === 'string') {\n        return { path, content };\n      }\n\n      return { path, content: JSON.stringify(content, null, 2) };\n    })\n    .map(x => Object.assign(x, { mode: '100644', type: 'blob' }));\n}\n"]}